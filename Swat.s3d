#include <Bullet.s3d>
#include <Network.s3d>

SET ANGLE_STEP	= 1;
SET START_FRAME = 16;
SET END_FRAME 	= 48;

SET MAX_HEALTH  = 100;
SET DMG_HEALTH  = 25;
SET CLIP_SIZE   = 10;
SET CLIP_NUM    = 9;
SET RELOAD_TIME = 1000;


class Swat
{
// Private:
	var Level;
	var RootObj;
	var UpperMesh,  UpperObj;
	var LowerMesh,  LowerObj;
	var WeaponMesh, WeaponObj;
	var CurrentFrame;
	
	var Bullets;
	var BulletNum;
	var ReloadTimer;
	
	var FX_Hit;
	var FX_Shoot;
	var FX_Jam;
	var FireBillboard, FireObj;
	var HitAnimLength;
	
	var AdvertiseTimer;

// Public:
	var Id;
	var Color;
	var Position;
	var Direction;
	var Pitch, Yaw; /* in GRAD */
	var Score;
	var Health;
	var ClipCurrent, ClipRemaining;
	var IsMoving;
	var IsReloading;
	var CanShoot;
	var IsLocal;
	

	Update();
	UpdateFX(listener);
	Draw();
	
	ParseKeyboard();
	
	Respawn();
	Scored();
	Hit();
};


function Swat::Swat(p_id, p_color, p_pos, p_local)
{
	/* Initialize player variables */
	Id 			  = p_id;
	Color		  = p_color;
	Position      = p_pos;
	Direction     = [0, 0, 0];
	Pitch     	  = 0;
	Yaw           = 0;
	Score		  = 0;
	Health        = MAX_HEALTH;
	ClipCurrent   = CLIP_SIZE;
	ClipRemaining = CLIP_SIZE * CLIP_NUM;
	IsMoving      = false;
	IsReloading   = false;
	CanShoot      = true;
	IsLocal       = p_local;
	
	/* Initialize network */
	AdvertiseTimer = 0;
	
	/* Initialize bullets */
	BulletNum    = 0;
	Bullets      = Array(0);
	ReloadTimer  = -RELOAD_TIME;
	
	/* Initialize effects */
	FX_Hit        = CVmVRAWav("hit.wav", true);
	FX_Shoot      = CVmVRAWav("shoot.wav", true);
	FX_Jam        = CVmVRAWav("jam.wav", true);
	FireBillboard = CVmBillboard("flame43.avi", 0.5, 0.5);
	FireObj       = CVmObj();
	HitAnimLength = 0;
	
	FireObj.LinkToBillboard(FireBillboard);
	FireObj.SetPosition(Position);
	
	var sound_pos = Position + [0, 1, 0];
	FX_Hit.SetPosition(sound_pos);
	
	/* Initialize animations */
	CurrentFrame = START_FRAME;
	
	/* Initialize meshes */
	UpperMesh  = CVmNewMesh("swat_upper.aam");
	LowerMesh  = CVmNewMesh("swat_lower.aam");
	WeaponMesh = CVmNewMesh("railgun.aam");
		
	UpperMesh.Scale(0.04);
	LowerMesh.Scale(0.04);
	WeaponMesh.Scale(0.04);
	
	/* Initialize objects */
	UpperObj  = CVmObj(upperMesh);
	LowerObj  = CVmObj(lowerMesh);
	WeaponObj = CVmObj(weaponMesh);
	
	RootObj = CVmObj();
	RootObj.AddChild(UpperObj);
	RootObj.AddChild(LowerObj);
	RootObj.AddChild(WeaponObj);
	
	RootObj.ModulateMaterials(Color);
}


function Swat::Draw()
{
	/* Draw player */
	RootObj.Draw(VR_FRAMENUMBER, CurrentFrame);
	foreach (var b in Bullets)
		b.Draw();
	
	/* Draw hit effect */
	if(HitAnimLength > 0)
	{
		glDisable(GL_LIGHTING);
		glEnable(GL_BLEND);
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_COLOR);
		glColor(1, 1, 1);
		glDisable(GL_DEPTH_TEST);
		FireObj.Draw();
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
		glEnable(GL_LIGHTING);
		glEnable(GL_DEPTH_TEST);
		HitAnimLength--;
	}
}


function Swat::Update()
{
	/* Actions taken only if instance of local player */
	if (IsLocal)
	{
		/* Parse new events */
		ParseKeyboard();
		
		/* Update bullets */
		for (var i = 0; i < BulletNum; i++)
		{
			var b = Bullets[i];
			b.Update(level);
			
			if (!b.IsFlying)
			{
				adel(Bullets, i);
				BulletNum--;
				i--;
			}
		}
		
		/* Advertise presence */
		if (getTime() - AdvertiseTimer > ADVERTISE_TIMEOUT)
		{
			AdvertiseTimer = getTime();
			
			var PDU = Vector(5);
			PDU[0] = ADVERTISE_PDU;
			PDU[1] = ID;
			PDU[2] = Color.r;
			PDU[3] = Color.g;
			PDU[4] = Color.b;
			
			NetworkSend(PDU);
		}
		
		{
			/* Send movement data */
			var PDU = Vector(9);
			PDU[0] = MOVEMENT_PDU;
			PDU[1] = ID;
			PDU[2] = Position.x;
			PDU[3] = Position.y;
			PDU[4] = Position.z;
			PDU[5] = Pitch;
			PDU[6] = Yaw;
			
			if (!IsMoving)
				PDU[7] = 0;
			else
				PDU[7] = 1;
			
			PDU[8] = CurrentFrame;
			
			NetworkSend(PDU);
		}
		
		{
			/* Send bullet data */
			var PDU = Vector((BulletNum * 6) + 2);
			PDU[0] = BULLETS_PDU;
			PDU[1] = ID;
			
			var i = 2;
			foreach (var b in Bullets)
			{
				PDU[i + 0] = b.Position.x;
				PDU[i + 1] = b.Position.y;
				PDU[i + 2] = b.Position.z;
				PDU[i + 3] = b.Direction.x;
				PDU[i + 4] = b.Direction.y;
				PDU[i + 5] = b.Direction.z;
			}
		}
	}

	/* Update animation */
	if(CurrentFrame > END_FRAME) CurrentFrame = START_FRAME;
	if(CurrentFrame < START_FRAME) CurrentFrame = END_FRAME;
	
	if(!IsMoving)
		CurrentFrame = 0;
	
	/* Update player position */
	RootObj.SetPosition(Position);
	RootObj.SetRotation(Yaw, [0, 1, 0]);
		
	/* Update FX position */
	FX_Hit.SetPosition(Position);
	FX_Shoot.SetPosition(Position);
	FX_Jam.SetPosition(Position);
	
	FireObj.SetPosition(Position + [0, 1, 0]);
}


function Swat::UpdateFX(listener)
{
	var pos   = listener.GetPosition();
	var front = listener.GetZAxis(); 
	var top   = listener.GetYAxis();
	
	FX_Hit.SetListenerPosition(pos);
	FX_Hit.SetListenerOrientation(-front, top);
	
	FX_Shoot.SetListenerPosition(pos);
	FX_Shoot.SetListenerOrientation(-front, top);
	
	FX_Jam.SetListenerPosition(pos);
	FX_Jam.SetListenerOrientation(-front, top);
}


function Swat::Hit()
{
	/* Decrease health */
	Health -= DMG_HEALTH;
	
	if (Health <= 0)
	{
		Respawn();
		return true;
	}
	else
	{
		/* Play hit anim */
		HitAnimLength = 30;
		FX_Hit.Play();
		return false;
	}
}


function Swat::Scored()
{
	Score++;
}


function Swat::Respawn()
{
	Direction     = [0, 0, 0];
	Pitch         = 0;
	Yaw           = 0;
	Health        = MAX_HEALTH;
	ClipCurrent   = CLIP_SIZE;
	ClipRemaining = CLIP_SIZE * CLIP_NUM;
	
	HitAnimLength = 0;
	
	while (true)
	{
		var x = Rand(Level.Width - 1) + 0.5;
		var z = Rand(Level.Height - 1) + 0.5;
		
		if (!Level.IsColliding(x, z, 0))
		{
			Position = [x, 0, z];
			return;
		}
	}
}


function Swat::ParseKeyboard()
{
	static var pitch = 0;
	var step        = 0.05;
	var mouseStep   = 0.2;
	var animStep    = 0.5;
	var oldPosition = Position;
	
	var mouseDelta = [Mouse.DeltaX, Mouse.DeltaY];
	
	IsMoving  = false;
	
	Yaw      -= mouseDelta.X * mouseStep;
	Pitch    -= mouseDelta.Y * mouseStep;
	Direction = [ sin(Yaw * GRAD_TO_RAD),
				  sin(Pitch * GRAD_TO_RAD),
				  cos(Yaw * GRAD_TO_RAD) ];
	
	/* Shift: run */
	if (KeyPressed(VK_SHIFT))
	{
		step *= 3;
		animStep *= 2;
	}
	
	/* Turn right */
	if (KeyPressed("D"))
	{
		Position += step * VectorRotate(-90, [0,1,0], Direction.x_z);
		CurrentFrame += animStep;
		IsMoving = true;
	}
		
	/* Turn left */
	if (KeyPressed("A"))
	{
		Position += step * VectorRotate(90, [0,1,0], Direction.x_z);
		CurrentFrame += animStep;
		IsMoving = true;
	}
		
	/* Go forward */
	if (KeyPressed("W"))
	{
		Position += step * Direction.x_z;
		CurrentFrame += animStep;
		IsMoving = true;
	}
	
	/* Go backward */
	if (KeyPressed("S"))
	{
		Position -= step * Direction.x_z;
		CurrentFrame -= animStep;
		IsMoving = true;
	}
	
	/* Reload */
	if (getTime() - ReloadTimer > RELOAD_TIME)
	{
		IsReloading = false;

		if (KeyPressed("R") && ClipCurrent != CLIP_SIZE && ClipRemaining > 0)
		{
			ReloadTimer = getTime();
		
			var tmp = ClipRemaining;
			var toReload = CLIP_SIZE - ClipCurrent;
			
			ClipRemaining = (ClipRemaining > toReload) ? ClipRemaining - toReload : 0;
			ClipCurrent = (ClipRemaining > 0) ? CLIP_SIZE : ClipCurrent + tmp;
		}
	}
	else
	{
		IsReloading = true;
	}
	
	/* Shoot */
	if (Mouse.ButtonL && CanShoot && !IsReloading)
	{
		if (ClipCurrent > 0) 
		{
			ClipCurrent--;
			
			var b = Bullet(Color);
			aadd(Bullets, b);
			BulletNum++;	
			
			b.Shoot(Position, Direction);
			FX_Shoot.Play();
		}
		else
		{
			FX_Jam.Play();
		}
		
		CanShoot = false;
	}
	else if (!Mouse.ButtonL)
	{
		CanShoot = true;
	}
	
	/* Check collision */
	if (Level.IsColliding(Position.x, Position.z, 0.3))
		Position = oldPosition;
}

