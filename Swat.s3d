#include <Bullet.s3d>

SET ANGLE_STEP	= 1;
SET START_FRAME = 16;
SET END_FRAME 	= 48;
SET MAX_LIFE    = 10;
SET CLIP_SIZE   = 10;

class Swat
{
// Private:
	var RootObj;
	var UpperMesh,  UpperObj;
	var LowerMesh,  LowerObj;
	var WeaponMesh, WeaponObj;
	var CurrentFrame;
	
	var Bullets;
	var BulletNum;
	
	var FX_Hit;
	var FX_Shoot;
	var FireBillboard, FireObj;
	var HitCounter;

// Public:
	var Id;
	var Color;
	var Position;
	var Direction;
	var Angle;	   /* in GRAD */
	var Score;
	var ClipCurrent, ClipRemaining;
	var IsMoving;
	var IsReloading;
	var CanShoot;
	var IsLocal;
	

	Update(level);
	Draw();
	
	ParseKeyboard(level);
	ParseNetwork(level);
	
	Scored();
	Hit();
};


function Swat::Swat(p_id, p_color, p_pos, p_local)
{
	/* Initialize player variables */
	Id 			  = p_id;
	Color		  = p_color;
	Position      = p_pos;
	Direction     = [0, 0, 0];
	Angle     	  = 0;
	Score		  = 0;
	ClipCurrent   = CLIP_SIZE;
	ClipRemaining = CLIP_SIZE * 2;
	IsMoving      = false;
	IsReloading   = false;
	CanShoot      = true;
	IsLocal       = p_local;
	
	/* Initialize bullets */
	BulletNum    = 0;
	Bullets      = Array(0);
	
	/* Initialize effects */
	FX_Hit        = CVmVRAWav("hit.wav", true);
	FX_Shoot      = CVmVRAWav("shoot.wav", true);
	FireBillboard = CVmBillboard("flame43.avi", 0.5, 0.5);
	FireObj       = CVmObj();
	HitCounter    = 0;
	
	FireObj.LinkToBillboard(FireBillboard);
	FireObj.SetPosition(Position);
	
	var sound_pos = Position + [0, 1, 0];
	FX_Hit.SetPosition(sound_pos);
	
	/* Initialize animations */
	CurrentFrame = START_FRAME;
	
	/* Initialize meshes */
	UpperMesh  = CVmNewMesh("swat_upper.aam");
	LowerMesh  = CVmNewMesh("swat_lower.aam");
	WeaponMesh = CVmNewMesh("railgun.aam");
		
	UpperMesh.Scale(0.04);
	LowerMesh.Scale(0.04);
	WeaponMesh.Scale(0.04);
	
	/* Initialize objects */
	UpperObj  = CVmObj(upperMesh);
	LowerObj  = CVmObj(lowerMesh);
	WeaponObj = CVmObj(weaponMesh);
	
	RootObj = CVmObj();
	RootObj.AddChild(UpperObj);
	RootObj.AddChild(LowerObj);
	RootObj.AddChild(WeaponObj);
	
	RootObj.ModulateMaterials(Color);
}


function Swat::Draw()
{
	/* Draw player */
	RootObj.Draw(VR_FRAMENUMBER, CurrentFrame);
	foreach (var b in Bullets)
		b.Draw();
	
	/* Draw hit effect */
	if(HitCounter > 0)
	{
		glDisable(GL_LIGHTING);
		glEnable(GL_BLEND);
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_COLOR);
		glColor(1, 1, 1);
		glDisable(GL_DEPTH_TEST);
		FireObj.Draw();
		glBlendFunc(GL_ONE, GL_ONE_MINUS_SRC_ALPHA);
		glEnable(GL_LIGHTING);
		glEnable(GL_DEPTH_TEST);
		HitCounter--;
	}
}


function Swat::Update(level)
{
	/* Parse new events */
	if (IsLocal)
		ParseKeyboard(level);
	else
		ParseNetwork(level);

	/* Update animation */
	if(CurrentFrame > END_FRAME) CurrentFrame = START_FRAME;
	if(CurrentFrame < START_FRAME) CurrentFrame = END_FRAME;
	
	if(!IsMoving)
		CurrentFrame = 0;
	
	/* Update player position */
	RootObj.SetPosition(Position);
	RootObj.SetRotation(Angle, [0, 1, 0]);
		
	/* Update FX position */
	var sound_pos = Position + [0, 1, 0];
	FX_Hit.SetPosition(sound_pos);
	FireObj.SetPosition(Position + [0, 1, 0]);
	
	/* Update bullets */
	for (var i = 0; i < BulletNum; i++)
	{
		var b = Bullets[i];
		b.Update(level);
		
		if (!b.IsFlying)
		{
			adel(Bullets, i);
			BulletNum--;
			i--;
		}
	}
}


function Swat::Hit()
{
	HitCounter += 10;
	FX_Hit.Play();
}


function Swat::Scored()
{
	Score++;
}


function Swat::ParseKeyboard(level)
{
	var step        = 0.05;
	var mouseStep   = 0.2;
	var animStep    = 0.5;
	var oldPosition = Position;
	
	var mouseDelta = [Mouse.DeltaX, Mouse.DeltaY];
	
	IsMoving  = false;
	
	Angle    -= mouseDelta.X * mouseStep;
	Direction = [ sin(Angle * GRAD_TO_RAD),
				  0,
				  cos(Angle * GRAD_TO_RAD) ];
	
	/* Shift: run */
	if (KeyPressed(VK_SHIFT))
	{
		step *= 3;
		animStep *= 2;
	}
	
	/* Turn right */
	if (KeyPressed("D"))
	{
		Position += step * VectorRotate(-90, [0,1,0], Direction);
		CurrentFrame += animStep;
		IsMoving = true;
	}
		
	/* Turn left */
	if (KeyPressed("A"))
	{
		Position += step * VectorRotate(90, [0,1,0], Direction);
		CurrentFrame += animStep;
		IsMoving = true;
	}
		
	/* Go forward */
	if (KeyPressed("W"))
	{
		Position += step * Direction;
		CurrentFrame += animStep;
		IsMoving = true;
	}
	
	/* Go backward */
	if (KeyPressed("S"))
	{
		Position -= step * Direction;
		CurrentFrame -= animStep;
		IsMoving = true;
	}
	
	/* Reload */
	if (KeyPressed("R") && !IsReloading)
	{
		IsReloading = true;
		
		if (ClipCurrent != CLIP_SIZE && ClipRemaining > 0)
		{
			var tmp = ClipRemaining;
			var toReload = CLIP_SIZE - ClipCurrent;
			
			ClipRemaining = (ClipRemaining > toReload) ? ClipRemaining - toReload : 0;
			ClipCurrent = (ClipRemaining > 0) ? CLIP_SIZE : ClipCurrent + tmp;
		}
	}
	else
		IsReloading = false;
	
	/* Shoot */
	if (Mouse.ButtonL && CanShoot)
	{
		if (ClipCurrent > 0) 
		{
			ClipCurrent--;
			
			var b = Bullet(Color);
			aadd(Bullets, b);
			BulletNum++;	
			
			b.Shoot(Position, Direction);
			FX_Shoot.Play();
		}
		
		CanShoot = false;
	}
	else if (!Mouse.ButtonL)
	{
		CanShoot = true;
	}
	
	/* Check collision */
	if (level.IsColliding(Position.x, Position.z, 0.3))
		Position = oldPosition;
}


function Swat::ParseNetwork(level)
{
	
}
