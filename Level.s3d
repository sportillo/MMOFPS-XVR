class Level
{
	var floorMesh;
	var floorObj;
	var wallMesh;
	var wallObj;
	var wallMatrix;
	var wallMaterial,  wallTexture;
	var floorMaterial, floorTexture;
	var playersArray;
	var playersNumber;
	var fx_start;
	Init(filename);
	Update();
	Draw();
	GetWall();
	AddPlayer(color, pos);
	GetPlayers();
	GetWallMatrix();
	GetFX();
};

function Level::GetFX()
{
	return fx_start;
}

function distance(pos1, pos2)
{
	var temp2 = [pos2.x, 0, pos2.z];
	var temp1 = [pos1.x, 0, pos1.z];
	return modulus(temp2-temp1);
}

function Level::Init(filename)
{
	var data = LoadFile(filename);
	var height = len(data) - 1;
	var width = len(data[0]);
	fx_start = CVmVRAWav("start.wav", true);
	wallMatrix  = array(height);
	for (var i = 0; i<height; i++)
	{
		wallMatrix[i] = array(width);
	}
	
	playersArray = array(0);
	playersNumber = 0;
	
	wallTexture  = CVmTexture("Mattoni03.png");
	floorTexture = CVmTexture("Marmostriato2.png");
	
	wallMaterial  = CVmMaterial();
	floorMaterial = CVmMaterial();
	wallMesh = CVmNewMesh(VRP_BOX);
	floorMesh = CVmNewMesh(VRP_BOX);
	
	wallMaterial.diffuse = [1, 1, 1];
	wallMaterial.SetTexture(wallTexture);
	floorMaterial.diffuse = [1, 1, 1];
	floorMaterial.SetTexture(floorTexture);
	wallMaterial.ChangeTextureParams(VR_V_TILING, 3);
	
	wallMesh.Scale(1, 3, 1);
	wallMesh.ForceMaterial(wallMaterial);
	floorMesh.ForceMaterial(floorMaterial);
	floorMesh.ModulateMaterials(0, 1, 0, 1);
	
	wallObj = array(0);
	
	floorMesh.Translate(0, -1,  0);
	floorMesh.Scale(width, 1, height);
	floorObj = CVmObj(floorMesh);
	
	for(var i = 0; i < height; i++)
	{
		for (var j = 0; j < width; j++)
		{
			if(data[i][j] == "*")
			{
				var myObj = CVmObj();
				myObj.LinkToMesh(wallMesh);
				myObj.SetPosition(i, 0, j);
				aadd(wallObj, myObj);
				wallMatrix[i][j] = 1;
			} else
				wallMatrix[i][j] = 0;
			
		}
	}
}

function Level::Update()
{
	foreach (var p in playersArray)
		p.Update(this);
		
	foreach (var p in playersArray)
	{
		foreach ( var b in p.GetBullets())
		{
			if(b.GetFlying() == true)
			{
				foreach (var q in PlayersArray)
				{
					if(p!=q)
					{
						if(distance(q.GetPosition(),b.GetPosition()) < 0.3)
						{
							b.SetFlying(false);
							p.Scored();
							q.Hitted();
							//outputln("Player ", p.GetID(), " score: ", p.GetScore());
						}
					}
				}
			}
		}
	}
}

function Level::Draw()
{
	floorObj.Draw();
	foreach (var w in wallObj)
		w.Draw();
	foreach (var p in playersArray)
		p.Draw();
}

function Level::AddPlayer(color, pos)
{
	var newPlayer = Player(playersNumber, color, pos);
	aadd(playersArray, newPlayer);
	playersNumber = len(playersArray);
}

function Level::GetWall()
{
	return wallObj;	
}

function Level::GetPlayers()
{
	return playersArray;
}

function Level::GetWallMatrix()
{
	return wallMatrix;
}