SET BULLET_SPEED = 1.0;

class Bullet
{
// Private:
	var BulletMesh, BulletObj;
	var Traveled;
	
// Public:
	var Color;
	var	Position;
	var Direction;
	var Speed;
	var IsFlying;
	
	
	Update(level);
	Draw();
	
	Shoot(pos, dir);
};


function Bullet::Bullet(col)
{
	/* Initialize bullet variables */
	Color     = col;
	Position  = [0, 0, 0];
	Direction = [0, 0, 0];
	Traveled  = 0;
	Speed     = BULLET_SPEED;
	IsFlying  = false;

	/* Initialize mesh */
	BulletMesh = CVmNewMesh(VRP_BOX);
	BulletObj  = CVmObj(BulletMesh);
	
	BulletMesh.Normalize(0.1);
	BulletMesh.ModulateMaterials(Color);
}


function Bullet::Shoot(pos, dir)
{
	Position  = pos; Position.y = 1;
	Direction = dir;
	Traveled  = 0;
	IsFlying  = true;
}


function Bullet::Update(level)
{
	var oldPosition = Position;
	
	if (IsFlying)
	{
		/* Update position */
		Position += Direction * Speed;
		Traveled += modulus(Direction * Speed);
		
		/* Check collision with level */
		if (Position.y < 0 || Traveled > 1000 ||
			level.IsColliding(Position.x, Position.z, 0.1))
		   /* FIX: not working, IsColliding must take Y into account */
		{
			IsFlying = false;
		}
		else
			BulletObj.SetPosition(Position);
	}
}


function Bullet::Draw()
{
	/* Draw bullet */
	if(IsFlying)
		BulletObj.Draw();
}
